// Generated by CoffeeScript 1.12.3
(function() {
  var _;

  _ = require("lodash");

  _.mixin({
    sanatizeQuery: function(query) {
      return query != null ? query.trim().toLowerCase().replace(/\s+/gi, ' ') : void 0;
    }
  });

  _.mixin({
    capitalize: function(phrase) {
      var res;
      res = phrase.split(' ').map(function(string) {
        return string.charAt(0).toUpperCase() + string.substring(1).toLowerCase();
      });
      return res.join(' ');
    }
  });

  _.mixin({
    capitalizeName: function(str) {
      return str.toLowerCase().replace(/(?:^|\s|-)\S/g, function(a) {
        return a.toUpperCase();
      });
    }
  });

  _.mixin({
    padWithZeros: function(num, length) {
      if (length == null) {
        length = 7;
      }
      if (/^\d+$/.test(num) || _.isNumber(num)) {
        return ("000000000000000000000000000" + num).slice(-length);
      } else {
        return false;
      }
    }
  });

  _.mixin({
    compactObject: function(obj) {
      _.each(obj, function(value, key) {
        if (_.isArray(value)) {
          value = value.map(function(e) {
            if (e !== "N/A") {
              return e;
            }
          });
          obj[key] = _.compact(value);
          if (obj[key].length === 0) {
            delete obj[key];
          }
        }
        if (!value) {
          return delete obj[key];
        }
      });
      return obj;
    }
  });

  module.exports = _;


  /*
  
  #https://github.com/nrf110/deepmerge
  _.mixin deepMerge: (target, src) ->
    array = Array.isArray(src)
    dst = array and [] or {}
    if array
      target = target or []
      dst = dst.concat(target)
      src.forEach (e, i) ->
        if typeof target[i] is "undefined"
          dst[i] = e
        else if typeof e is "object"
          dst[i] = _.deepMerge(target[i], e)
        else
          dst.push e  if target.indexOf(e) is -1
  
    else
      if target and typeof target is "object"
        Object.keys(target).forEach (key) ->
          dst[key] = target[key]
  
      Object.keys(src).forEach (key) ->
        if typeof src[key] isnt "object" or not src[key]
          dst[key] = src[key]
        else
          unless target[key]
            dst[key] = src[key]
          else
            dst[key] = _.deepMerge(target[key], src[key])
  
    return dst
   */

}).call(this);
